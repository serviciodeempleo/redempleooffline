<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MvvmValidation</name>
    </assembly>
    <members>
        <member name="T:MvvmValidation.AsyncRuleValidateAction">
            <summary>
            Represents a method that takes a callback method for setting rule validation result as a parameter. 
            </summary>
            <param name="resultCallback">A continuation callback that should be called when the rule validation result is available.</param>
        </member>
        <member name="T:MvvmValidation.IAsyncValidationRule">
            <summary>
            Represents an asynchronious validation rule.
            </summary>
        </member>
        <member name="T:MvvmValidation.IValidationRule">
            <summary>
            Represents a validation rule.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly
            when marked with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/>
            or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder
            within a web project. Path can be relative or absolute,
            starting from web root (~)
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC controller. If applied to a method,
            the MVC controller name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC partial view. If applied to a method,
            the MVC partial view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling all inspections
            for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
        <member name="T:MvvmValidation.Internal.PropertyName">
            <summary>
            Gets property name using lambda expressions.
            </summary>
        </member>
        <member name="M:MvvmValidation.Internal.PropertyName.For``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean)">
            <summary>
            Returns the property name by given expression.
            </summary>
            <typeparam name="T">Type of property's return value</typeparam>
            <param name="expression">The expression.</param>
            <param name="compound"><c>True</c> if the full expression path should be used to build the string. For example, 
            call PropertyName.For(() => MyObj.Property.NestedProperty) will result in string "MyObj.Property.NestedProperty".
            If <c>False</c> it will return only the last part, which is "NestedProperty" in the example above.</param>
        </member>
        <member name="M:MvvmValidation.Internal.PropertyName.For(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Boolean)">
            <summary>
            Returns the property name by given expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="compound"><c>True</c> if the full expression path should be used to build the string. For example, 
            call PropertyName.For(() => MyObj.Property.NestedProperty) will result in string "MyObj.Property.NestedProperty".
            If <c>False</c> it will return only the last part, which is "NestedProperty" in the example above.</param>
        </member>
        <member name="M:MvvmValidation.Internal.PropertyName.GetMemberName(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Gets the member name by give expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="compound"><c>True</c> if the full expression path should be used to build the string. For example, 
            call GetMemberName(() => MyObj.Property.NestedProperty) will result in string "MyObj.Property.NestedProperty".
            If <c>False</c> it will return only the last part, which is "NestedProperty" in the example above.</param>
        </member>
        <member name="T:MvvmValidation.IValidatable">
            <summary>
            Represents an object that can be validated.
            </summary>
        </member>
        <member name="M:MvvmValidation.IValidatable.Validate">
            <summary>
            Validates the object asyncrhonously.
            </summary>
            <returns>Task that represents the validation operation.</returns>
        </member>
        <member name="T:MvvmValidation.IValidationResultFormatter">
            <summary>
            Represents a formatter that can be used to format an instance of <see cref="T:MvvmValidation.ValidationResult"/> to a string.
            </summary>
        </member>
        <member name="M:MvvmValidation.IValidationResultFormatter.Format(MvvmValidation.ValidationResult)">
            <summary>
            Converts the specified validation result object to a string.
            </summary>
            <param name="validationResult">The validation result to format.</param>
            <returns>A string representation of <paramref name="validationResult"/></returns>
        </member>
        <member name="T:MvvmValidation.NotifyDataErrorInfoAdapter">
            <summary>
            Adapts an instance of <see cref="T:MvvmValidation.ValidationHelper"/> to the <see cref="T:System.ComponentModel.INotifyDataErrorInfo"/> interface.
            </summary>
        </member>
        <member name="M:MvvmValidation.NotifyDataErrorInfoAdapter.#ctor(MvvmValidation.ValidationHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmValidation.NotifyDataErrorInfoAdapter"/> class.
            </summary>
            <param name="validator">The adaptee.</param>
        </member>
        <member name="M:MvvmValidation.NotifyDataErrorInfoAdapter.#ctor(MvvmValidation.ValidationHelper,System.Threading.SynchronizationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmValidation.NotifyDataErrorInfoAdapter"/> class.
            </summary>
            <param name="validator">The adaptee.</param>
            <param name="errorsChangedNotificationContext">Synchronization context that should be used to raise the <see cref="E:MvvmValidation.NotifyDataErrorInfoAdapter.ErrorsChanged"/> event on.</param>
        </member>
        <member name="M:MvvmValidation.NotifyDataErrorInfoAdapter.GetErrors(System.String)">
            <summary>
            Gets the validation errors for a specified property or for the entire object.
            </summary>
            <param name="propertyName">The name of the property to retrieve validation errors for, or null or <see cref="F:System.String.Empty"/> to retrieve errors for the entire object.</param>
            <returns>
            The validation errors for the property or object.
            </returns>
        </member>
        <member name="P:MvvmValidation.NotifyDataErrorInfoAdapter.HasErrors">
            <summary>
            Gets a value that indicates whether the object has validation errors.
            </summary>
            <returns>true if the object currently has validation errors; otherwise, false.</returns>
        </member>
        <member name="E:MvvmValidation.NotifyDataErrorInfoAdapter.ErrorsChanged">
            <summary>
            Occurs when the validation errors have changed for a property or for the entire object.
            </summary>
        </member>
        <member name="T:MvvmValidation.NumberedListValidationResultFormatter">
            <summary>
            An implementation of <see cref="T:MvvmValidation.IValidationResultFormatter"/> that formats the validation result as 
            a numbered list of errors or an empty string if valid.
            </summary>
        </member>
        <member name="M:MvvmValidation.NumberedListValidationResultFormatter.Format(MvvmValidation.ValidationResult)">
            <summary>
            Converts the specified validation result object to a string.
            </summary>
            <param name="validationResult">The validation result to format.</param>
            <returns>
            A string representation of <paramref name="validationResult"/>
            </returns>
        </member>
        <member name="T:MvvmValidation.RuleResult">
            <summary>
            Represents the outcome of a validation rule when executed.
            </summary>
        </member>
        <member name="M:MvvmValidation.RuleResult.Invalid(System.String)">
            <summary>
            Creates an "Invalid" result with the given error <paramref name="error"/>.
            </summary>
            <param name="error">The error text that describes why this rule is invalid.</param>
            <returns>An instance of <see cref="T:MvvmValidation.RuleResult"/> that represents an invalid result.</returns>
        </member>
        <member name="M:MvvmValidation.RuleResult.Valid">
            <summary>
            Creates a "Valid" result.
            </summary>
            <returns>An instance of <see cref="T:MvvmValidation.RuleResult"/> that represents a valid outcome of the rule.</returns>
        </member>
        <member name="M:MvvmValidation.RuleResult.Assert(System.Boolean,System.String)">
            <summary>
            Asserts the specified condition and if <c>false</c> then creates and invalid result with the given <paramref name="errorMessage"/>. 
            If <c>true</c>, returns a valid result.
            </summary>
            <param name="condition">The assertion.</param>
            <param name="errorMessage">The error message in case if the <paramref name="condition"/> is not <c>true</c>.</param>
            <returns>An instance of <see cref="T:MvvmValidation.RuleResult"/> that represents the result of the assertion.</returns>
        </member>
        <member name="M:MvvmValidation.RuleResult.#ctor">
            <summary>
            Creates an empty (valid) instance of <see cref="T:MvvmValidation.RuleResult"/>. 
            The <see cref="M:MvvmValidation.RuleResult.AddError(System.String)"/> method can be used to add errors to the result later.
            </summary>
        </member>
        <member name="M:MvvmValidation.RuleResult.AddError(System.String)">
            <summary>
            Adds an error to the result.
            </summary>
            <param name="error">The error message to add.</param>
        </member>
        <member name="M:MvvmValidation.RuleResult.Equals(MvvmValidation.RuleResult)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:MvvmValidation.RuleResult.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MvvmValidation.RuleResult.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:MvvmValidation.RuleResult.IsValid">
            <summary>
            Gets a value indicating whether the validation rule passed (valid).
            </summary>
        </member>
        <member name="P:MvvmValidation.RuleResult.Errors">
            <summary>
            Gets the error messages in case if the target is invalid according to this validation rule.
            </summary>
        </member>
        <member name="T:MvvmValidation.RuleResultExtensions">
            <summary>
            Contains helper extension methods for working with <see cref="T:MvvmValidation.RuleResult"/>.
            </summary>
        </member>
        <member name="M:MvvmValidation.RuleResultExtensions.Combine(MvvmValidation.RuleResult,MvvmValidation.RuleResult)">
            <summary>
            Merges <paramref name="firstRuleResult"/> with given <paramref name="secondRuleResult"/> and returns a new instance of <see cref="T:MvvmValidation.ValidationResult"/>
            that represents the merged result (the result that contains errors from both results whithout duplicates).
            </summary>
            <param name="firstRuleResult">The first validation result to merge.</param>
            <param name="secondRuleResult">The second validation result to merge.</param>
            <returns>A new instance of <see cref="T:MvvmValidation.RuleResult"/> that represents the merged result (the result that contains errors from both results whithout duplicates).</returns>
        </member>
        <member name="T:MvvmValidation.ValidationError">
            <summary>
            Represents a validation error.
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationError.Equals(MvvmValidation.ValidationError)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:MvvmValidation.ValidationError.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MvvmValidation.ValidationError.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:MvvmValidation.ValidationError.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MvvmValidation.ValidationError.op_Implicit(MvvmValidation.ValidationError)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:MvvmValidation.ValidationError"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="error">The error.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="P:MvvmValidation.ValidationError.ErrorText">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:MvvmValidation.ValidationError.Target">
            <summary>
            Gets the target of the error (a property name or any other arbitrary object).
            </summary>
        </member>
        <member name="T:MvvmValidation.ValidationErrorCollection">
            <summary>
            Represents a collection of <see cref="T:MvvmValidation.ValidationError"/> instances.
            </summary>
        </member>
        <member name="T:MvvmValidation.ValidationException">
            <summary>
            Represents an exception that occurs during validation
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmValidation.ValidationException"/> class.
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmValidation.ValidationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:MvvmValidation.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmValidation.ValidationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:MvvmValidation.ValidationHelper">
            <summary>
            Main helper class that contains the functionality of managing validation rules, 
            executing validation using those rules and keeping validation results.
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.ValidateAsync(System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            Executes validation for the given property asynchronously. 
            Executes all (normal and async) validation rules for the property specified in the <paramref name="propertyPathExpression"/>.
            </summary>
            <param name="propertyPathExpression">Expression for the property to validate. Example: ValidateAsync(() => MyProperty, ...).</param>
            <returns>Task that represents the validation operation.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.ValidateAsync(System.Object)">
            <summary>
            Executes validation for the given target asynchronously. 
            Executes all (normal and async) validation rules for the target object specified in the <paramref name="target"/>.
            </summary>
            <param name="target">The target object to validate.</param>
            <returns>Task that represents the validation operation.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.ValidateAllAsync">
            <summary>
            Executes validation using all validation rules asynchronously.
            </summary>
            <returns>Task that represents the validation operation.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmValidation.ValidationHelper"/> class.
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddRule(System.Object,System.Func{MvvmValidation.RuleResult})">
            <summary>
            Adds a validation rule that validates the <paramref name="target"/> object.
            </summary>
            <param name="target">The validation target (object that is being validated by <paramref name="validateDelegate"/>).</param>
            <param name="validateDelegate">
            The validation delegate - a function that returns an instance 
            of <see cref="T:MvvmValidation.RuleResult"/> that indicated whether the rule has passed and 
            a collection of errors (in not passed).
            </param>
            <returns>An instance of <see cref="T:MvvmValidation.IValidationRule"/> that represents the newly created validation rule.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddRule(System.Func{MvvmValidation.RuleResult})">
            <summary>
            Adds a simple validation rule.
            </summary>
            <param name="validateDelegate">
            The validation delegate - a function that returns an instance 
            of <see cref="T:MvvmValidation.RuleResult"/> that indicated whether the rule has passed and 
            a collection of errors (in not passed).
            </param>
            <returns>An instance of <see cref="T:MvvmValidation.IValidationRule"/> that represents the newly created validation rule.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddRule(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Func{MvvmValidation.RuleResult})">
            <summary>
            Adds a validation rule that validates a property of an object. The target property is specified in the <paramref name="propertyExpression"/> parameter.
            </summary>
            <param name="propertyExpression">The target property expression. Example: AddRule(() =&gt; MyProperty, ...).</param>
            <param name="validateDelegate">
            The validation delegate - a function that returns an instance 
            of <see cref="T:MvvmValidation.RuleResult"/> that indicated whether the rule has passed and 
            a collection of errors (in not passed).
            </param>
            <example>
            <code>
            AddRule(() =&gt; Foo, , () =&gt; RuleResult.Assert(Foo &gt; 10, "Foo must be greater than 10"))
            </code>
            </example>
            <returns>An instance of <see cref="T:MvvmValidation.IValidationRule"/> that represents the newly created validation rule.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddRule(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Linq.Expressions.Expression{System.Func{System.Object}},System.Func{MvvmValidation.RuleResult})">
            <summary>
            Adds a validation rule that validates two dependent properties.
            </summary>
            <param name="property1Expression">The first target property expression. Example: AddRule(() =&gt; MyProperty, ...).</param>
            <param name="property2Expression">The second target property expression. Example: AddRule(..., () =&gt; MyProperty, ...).</param>
            <param name="validateDelegate">
            The validation delegate - a function that returns an instance 
            of <see cref="T:MvvmValidation.RuleResult"/> that indicated whether the rule has passed and 
            a collection of errors (in not passed).
            </param>
            <example>
            <code>
            AddRule(() =&gt; Foo, () =&gt; Bar, () =&gt; RuleResult.Assert(Foo &gt; Bar, "Foo must be greater than bar"))
            </code>
            </example>
            <returns>An instance of <see cref="T:MvvmValidation.IValidationRule"/> that represents the newly created validation rule.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddRule(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{System.Object}}},System.Func{MvvmValidation.RuleResult})">
            <summary>
            Adds a validation rule that validates a collection of dependent properties.
            </summary>
            <param name="properties">The collection of target property expressions. Example: AddRule(new [] { () =&gt; MyProperty1, () =&gt; MyProperty2, () =&gt; MyProperty3 }, ...).</param>
            <param name="validateDelegate">
            The validation delegate - a function that returns an instance 
            of <see cref="T:MvvmValidation.RuleResult"/> that indicated whether the rule has passed and 
            a collection of errors (in not passed).
            </param>
            <returns>An instance of <see cref="T:MvvmValidation.IValidationRule"/> that represents the newly created validation rule.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddAsyncRule(System.Object,System.Func{System.Threading.Tasks.Task{MvvmValidation.RuleResult}})">
            <summary>
            Adds an asynchronious validation rule that validates the <paramref name="target"/> object.
            </summary>
            <param name="target">The validation target (object that is being validated by <paramref name="validateAction"/>).</param>
            <param name="validateAction">The validation delegate - a function that performs asyncrhonious validation.</param>
            <returns>An instance of <see cref="T:MvvmValidation.IAsyncValidationRule"/> that represents the newly created validation rule.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddAsyncRule(System.Func{System.Threading.Tasks.Task{MvvmValidation.RuleResult}})">
            <summary>
            Adds an asynchronious validation rule.
            </summary>
            <param name="validateAction">The validation delegate - a function that performs asyncrhonious validation.</param>
            <returns>An instance of <see cref="T:MvvmValidation.IAsyncValidationRule"/> that represents the newly created validation rule.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddAsyncRule(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Func{System.Threading.Tasks.Task{MvvmValidation.RuleResult}})">
            <summary>
            Adds an asynchronious validation rule that validates a property of an object. The target property is specified in the <paramref name="propertyExpression"/> parameter.
            </summary>
            <param name="propertyExpression">The target property expression. Example: AddAsyncRule(() =&gt; MyProperty, ...).</param>
            <param name="validateAction">The validation delegate - a function that performs asyncrhonious validation.</param>
            <example>
            <code>
            AddRule(() =&gt; Foo, 
            		() =&gt; 
                    {
            			return ValidationServiceFacade.ValidateFooAsync(Foo)
                            .ContinueWith(t =&gt; return RuleResult.Assert(t.Result.IsValid, "Foo must be greater than 10"));
            		})
            </code>
            </example>
            <returns>An instance of <see cref="T:MvvmValidation.IAsyncValidationRule"/> that represents the newly created validation rule.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddAsyncRule(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Linq.Expressions.Expression{System.Func{System.Object}},System.Func{System.Threading.Tasks.Task{MvvmValidation.RuleResult}})">
            <summary>
            Adds an asynchronious validation rule that validates two dependent properties.
            </summary>
            <param name="property1Expression">The first target property expression. Example: AddRule(() =&gt; MyProperty, ...).</param>
            <param name="property2Expression">The second target property expression. Example: AddRule(..., () =&gt; MyProperty, ...).</param>
            <param name="validateAction">The validation delegate - a function that performs asyncrhonious validation.</param>
            <example>
            <code>
            AddRule(() =&gt; Foo, () =&gt; Bar
            		() =&gt; 
                    {
            			return ValidationServiceFacade.ValidateFooAndBar(Foo, Bar)
                                  .ContinueWith(t =&gt; RuleResult.Assert(t.Result.IsValid, "Foo must be greater than 10"));
            		})
            </code>
            </example>
            <returns>An instance of <see cref="T:MvvmValidation.IAsyncValidationRule"/> that represents the newly created validation rule.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddAsyncRule(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{System.Object}}},System.Func{System.Threading.Tasks.Task{MvvmValidation.RuleResult}})">
            <summary>
            Adds an asynchronious validation rule that validates a collection of dependent properties.
            </summary>
            <param name="properties">The collection of target property expressions. Example: AddAsyncRule(new [] { () =&gt; MyProperty1, () =&gt; MyProperty2, () =&gt; MyProperty3 }, ...).</param>
            <param name="validateAction">The validation delegate - a function that performs asyncrhonious validation.</param>
            <returns>An instance of <see cref="T:MvvmValidation.IAsyncValidationRule"/> that represents the newly created validation rule.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddAsyncRule(System.Object,MvvmValidation.AsyncRuleValidateAction)">
            <summary>
            Adds an asynchronious validation rule that validates the <paramref name="target"/> object.
            </summary>
            <param name="target">The validation target (object that is being validated by <paramref name="validateAction"/>).</param>
            <param name="validateAction">
            The validation delegate - a function that performs asyncrhonious validation and calls a continuation callback with an instance 
            of <see cref="T:MvvmValidation.RuleResult"/> that indicated whether the rule has passed and 
            a collection of errors (in not passed).
            </param>
            <returns>An instance of <see cref="T:MvvmValidation.IAsyncValidationRule"/> that represents the newly created validation rule.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddAsyncRule(MvvmValidation.AsyncRuleValidateAction)">
            <summary>
            Adds an asynchronious validation rule.
            </summary>
            <param name="validateAction">
            The validation delegate - a function that performs asyncrhonious validation and calls a continuation callback with an instance 
            of <see cref="T:MvvmValidation.RuleResult"/> that indicated whether the rule has passed and 
            a collection of errors (in not passed).
            </param>
            <returns>An instance of <see cref="T:MvvmValidation.IAsyncValidationRule"/> that represents the newly created validation rule.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddAsyncRule(System.Linq.Expressions.Expression{System.Func{System.Object}},MvvmValidation.AsyncRuleValidateAction)">
            <summary>
            Adds an asynchronious validation rule that validates a property of an object. The target property is specified in the <paramref name="propertyExpression"/> parameter.
            </summary>
            <param name="propertyExpression">The target property expression. Example: AddAsyncRule(() =&gt; MyProperty, ...).</param>
            <param name="validateAction">
            The validation delegate - a function that performs asyncrhonious validation and calls a continuation callback with an instance 
            of <see cref="T:MvvmValidation.RuleResult"/> that indicated whether the rule has passed and 
            a collection of errors (in not passed).
            </param>
            <example>
            <code>
            AddRule(() =&gt; Foo, 
            		(onCompleted) =&gt; 
                    {
            			ValidationServiceFacade.ValidateFoo(Foo, result =&gt; onCompleted(RuleResult.Assert(result.IsValid, "Foo must be greater than 10")));
            		})
            </code>
            </example>
            <returns>An instance of <see cref="T:MvvmValidation.IAsyncValidationRule"/> that represents the newly created validation rule.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddAsyncRule(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Linq.Expressions.Expression{System.Func{System.Object}},MvvmValidation.AsyncRuleValidateAction)">
            <summary>
            Adds an asynchronious validation rule that validates two dependent properties.
            </summary>
            <param name="property1Expression">The first target property expression. Example: AddRule(() =&gt; MyProperty, ...).</param>
            <param name="property2Expression">The second target property expression. Example: AddRule(..., () =&gt; MyProperty, ...).</param>
            <param name="validateAction">
            The validation delegate - a function that performs asyncrhonious validation and calls a continuation callback with an instance 
            of <see cref="T:MvvmValidation.RuleResult"/> that indicated whether the rule has passed and 
            a collection of errors (in not passed).
            </param>
            <example>
            <code>
            AddRule(() =&gt; Foo, () =&gt; Bar
            		(onCompleted) =&gt; 
                    {
            			ValidationServiceFacade.ValidateFooAndBar(Foo, Bar, result =&gt; onCompleted(RuleResult.Assert(result.IsValid, "Foo must be greater than 10")));
            		})
            </code>
            </example>
            <returns>An instance of <see cref="T:MvvmValidation.IAsyncValidationRule"/> that represents the newly created validation rule.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddAsyncRule(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{System.Object}}},MvvmValidation.AsyncRuleValidateAction)">
            <summary>
            Adds an asynchronious validation rule that validates a collection of dependent properties.
            </summary>
            <param name="properties">The collection of target property expressions. Example: AddAsyncRule(new [] { () =&gt; MyProperty1, () =&gt; MyProperty2, () =&gt; MyProperty3 }, ...).</param>
            <param name="validateAction">
            The validation delegate - a function that performs asyncrhonious validation and calls a continuation callback with an instance 
            of <see cref="T:MvvmValidation.RuleResult"/> that indicated whether the rule has passed and 
            a collection of errors (in not passed).
            </param>
            <returns>An instance of <see cref="T:MvvmValidation.IAsyncValidationRule"/> that represents the newly created validation rule.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.RemoveRule(MvvmValidation.IValidationRule)">
            <summary>
            Removes the specified <paramref name="rule"/>.
            </summary>
            <param name="rule">Validation rule instance.</param>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.RemoveAllRules">
            <summary>
            Removes all validation rules.
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.GetResult">
            <summary>
            Returns the current validation state (all errors tracked by this instance of <see cref="T:MvvmValidation.ValidationHelper"/>).
            </summary>
            <returns>An instance of <see cref="T:MvvmValidation.ValidationResult"/> that contains an indication whether the object is valid and a collection of errors if not.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.GetResult(System.Object)">
            <summary>
            Returns the current validation state for the given <paramref name="target"/> (all errors tracked by this instance of <see cref="T:MvvmValidation.ValidationHelper"/>).
            </summary>
            <param name="target">The validation target for which to retrieve the validation state.</param>
            <returns>An instance of <see cref="T:MvvmValidation.ValidationResult"/> that contains an indication whether the object is valid and a collection of errors if not.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.GetResult(System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            Returns the current validation state for a property represented by <paramref name="propertyExpression"/> (all errors tracked by this instance of <see cref="T:MvvmValidation.ValidationHelper"/>).
            </summary>
            <param name="propertyExpression">The property for which to retrieve the validation state. Example: GetResult(() =&gt; MyProperty)</param>
            <returns>An instance of <see cref="T:MvvmValidation.ValidationResult"/> that contains an indication whether the object is valid and a collection of errors if not.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.Validate(System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            Validates (executes validation rules) the property specified in the <paramref name="propertyPathExpression"/> parameter.
            </summary>
            <param name="propertyPathExpression">Expression that specifies the property to validate. Example: Validate(() => MyProperty).</param>
            <returns>Result that indicates whether the given property is valid and a collection of errors, if not valid.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.Validate(System.Object)">
            <summary>
            Validates (executes validation rules) the specified target object.
            </summary>
            <param name="target">The target object to validate.</param>
            <returns>Result that indicates whether the given target object is valid and a collection of errors, if not valid.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.ValidateAll">
            <summary>
            Executes validation using all validation rules. 
            </summary>
            <returns>Result that indicates whether the validation was succesfull and a collection of errors, if it wasn't.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.SuppressValidation">
            <summary>
            Suppresses all the calls to the Validate* methods until the returned <see cref="T:System.IDisposable"/> is disposed
            by calling <see cref="M:System.IDisposable.Dispose"/>. 
            </summary>
            <remarks>
            This method is convenient to use when you want to suppress validation when setting initial value to a property. In this case you would
            wrap the code that sets the property into a <c>using</c> block. Like this:
            <code>
            using (Validation.SuppressValidation()) 
            {
                MyProperty = "Initial Value";
            }
            </code>
            </remarks>
            <returns>An instance of <see cref="T:System.IDisposable"/> that serves as a handle that you can call <see cref="M:System.IDisposable.Dispose"/> on to resume validation. The value can also be used in a <c>using</c> block.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.Reset">
            <summary>
            Resets the validation state. If there were any broken rules 
            then the targets for those rules will become valid again and the <see cref="E:MvvmValidation.ValidationHelper.ResultChanged"/> event will be rised.
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.ValidateAsync(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Action{MvvmValidation.ValidationResult})">
            <summary>
            Executes validation for the given property asynchronously. 
            Executes all (normal and async) validation rules for the property specified in the <paramref name="propertyPathExpression"/>.
            </summary>
            <param name="propertyPathExpression">Expression for the property to validate. Example: ValidateAsync(() => MyProperty, ...).</param>
            <param name="onCompleted">Callback to execute when the asynchronous validation is completed. The callback will be executed on the UI thread.</param>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.ValidateAsync(System.Object,System.Action{MvvmValidation.ValidationResult})">
            <summary>
            Executes validation for the given target asynchronously. 
            Executes all (normal and async) validation rules for the target object specified in the <paramref name="target"/>.
            </summary>
            <param name="target">The target object to validate.</param>
            <param name="onCompleted">Callback to execute when the asynchronous validation is completed. The callback will be executed on the UI thread.</param>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.ValidateAllAsync(System.Action{MvvmValidation.ValidationResult})">
            <summary>
            Executes validation using all validation rules asynchronously.
            </summary>
            <param name="onCompleted">Callback to execute when the asynchronous validation is completed. The callback will be executed on the UI thread.</param>
        </member>
        <member name="P:MvvmValidation.ValidationHelper.AsyncRuleExecutionTimeout">
            <summary>
            Gets or sets a timeout that indicates how much time is allocated for an async rule to complete.
            If a rule did not complete in this timeout, then an exception will be thrown.
            </summary>
        </member>
        <member name="P:MvvmValidation.ValidationHelper.IsValidationSuspended">
            <summary>
            Indicates whether the validation is currently suspended using the <see cref="M:MvvmValidation.ValidationHelper.SuppressValidation"/> method.
            </summary>
        </member>
        <member name="E:MvvmValidation.ValidationHelper.ResultChanged">
            <summary>
            Occurs when the validation result have changed for a property or for the entire entity (the result that is returned by the <see cref="M:MvvmValidation.ValidationHelper.GetResult"/> method).
            </summary>
        </member>
        <member name="T:MvvmValidation.ValidationHelperExtensions">
            <summary>
            Contains extensions methods for <see cref="T:MvvmValidation.ValidationHelper"/>.
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationHelperExtensions.AddRequiredRule(MvvmValidation.ValidationHelper,System.Linq.Expressions.Expression{System.Func{System.Object}},System.String)">
            <summary>
            Adds a rule that checks that the property represented by <paramref name="propertyExpression"/> is not
            null or empty string. 
            </summary>
            <param name="validator">An instance of <see cref="T:MvvmValidation.ValidationHelper"/> that is used for validation.</param>
            <param name="propertyExpression">Expression that specifies the property to validate. Example: Validate(() =&gt; MyProperty).</param>
            <param name="errorMessage">Error message in case if the property is null or empty.</param>
            <returns>An instance of <see cref="T:MvvmValidation.IValidationRule"/> that represents the newly created validation rule.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelperExtensions.AddChildValidatable(MvvmValidation.ValidationHelper,System.Linq.Expressions.Expression{System.Func{MvvmValidation.IValidatable}})">
            <summary>
            Creates a validation rule that validates the specified child <see cref="T:MvvmValidation.IValidatable"/> object and adds errors
            to this object if invalid.
            </summary>
            <param name="validator">An instance of <see cref="T:MvvmValidation.ValidationHelper"/> that is used for validation.</param>
            <param name="childValidatableGetter">Expression for getting the <see cref="T:MvvmValidation.IValidatable"/> object to add as child.</param>
            <returns>An instance of <see cref="T:MvvmValidation.IValidationRule"/> that represents the newly created validation rule.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelperExtensions.AddChildValidatableCollection(MvvmValidation.ValidationHelper,System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.IEnumerable{MvvmValidation.IValidatable}}})">
            <summary>
            Creates a validation rule that validates all the <see cref="T:MvvmValidation.IValidatable"/> items in the collection specified in <paramref name="validatableCollectionGetter"/>
            and adds error to this object from all the validatable items in invalid.
            </summary>
            <param name="validator">An instance of <see cref="T:MvvmValidation.ValidationHelper"/> that is used for validation.</param>
            <param name="validatableCollectionGetter">Expression for getting the collection of <see cref="T:MvvmValidation.IValidatable"/> objects to add as child items.</param>
            <returns>An instance of <see cref="T:MvvmValidation.IValidationRule"/> that represents the newly created validation rule.</returns>
        </member>
        <member name="T:MvvmValidation.ValidationResult">
            <summary>
            Encapsulates result of a validation. Contains a boolean <see cref="P:MvvmValidation.ValidationResult.IsValid"/> and a collection of errors <see cref="P:MvvmValidation.ValidationResult.ErrorList"/>.
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationResult.ToString(MvvmValidation.IValidationResultFormatter)">
            <summary>
            Formats this instance to a string using given <see cref="T:MvvmValidation.IValidationResultFormatter"/>.
            </summary>
            <param name="formatter">The formatter that can format the validation result.</param>
            <returns>
            A string that represents this validation result.
            </returns>
        </member>
        <member name="M:MvvmValidation.ValidationResult.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:MvvmValidation.ValidationResult.ErrorList">
            <summary>
            Gets the list of errors if any. If valid, returns an empty collection.
            </summary>
        </member>
        <member name="P:MvvmValidation.ValidationResult.IsValid">
            <summary>
            Gets a value indicating whether the validation was sucessful. If not, see <see cref="P:MvvmValidation.ValidationResult.ErrorList"/> for the list of errors.
            </summary>
        </member>
        <member name="P:MvvmValidation.ValidationResult.Item(System.Object)">
            <summary>
            Gets an error by <paramref name="target"/>, or <c>null</c> if valid.
            </summary>
        </member>
        <member name="T:MvvmValidation.ValidationResultChangedEventArgs">
            <summary>
            Contains arguments for the <see cref="E:MvvmValidation.ValidationHelper.ResultChanged"/> event.
            </summary>
        </member>
        <member name="P:MvvmValidation.ValidationResultChangedEventArgs.Target">
            <summary>
            Gets the target, for which the validation result has changed.
            </summary>
        </member>
        <member name="P:MvvmValidation.ValidationResultChangedEventArgs.NewResult">
            <summary>
            Gets the new validation result.
            </summary>
        </member>
        <member name="T:MvvmValidation.ValidationResultExtensions">
            <summary>
            Contains helper extension methods for working with <see cref="T:MvvmValidation.ValidationResult"/>.
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationResultExtensions.Combine(MvvmValidation.ValidationResult,MvvmValidation.ValidationResult)">
            <summary>
            Merges <paramref name="firstResult"/> with given <paramref name="secondResult"/> and returns a new instance of <see cref="T:MvvmValidation.ValidationResult"/>
            that represents the merged result (the result that contains errors from both results whithout duplicates).
            </summary>
            <param name="firstResult">The first validation result to merge.</param>
            <param name="secondResult">The second validation result to merge.</param>
            <returns>A new instance of <see cref="T:MvvmValidation.ValidationResult"/> that represents the merged result (the result that contains errors from both results whithout duplicates).</returns>
        </member>
    </members>
</doc>
